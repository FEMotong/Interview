算法需求: 指定时间内执行一次代码.达到节流目的,又不影响用户体验.
算法实现:
<script type="text/javascript">
    n=0;
    function resizehandler(){
        console.log(new Date().getTime());
        console.log(++n);
    }

    function throttle(method,delay){
        var timer=null;
        return function(){
            var context=this, args=arguments;
            clearTimeout(timer);
            timer=setTimeout(function(){
                method.apply(context,args);
            },delay);
        }

    }

    window.onresize=throttle(resizehandler,500);//因为返回函数句柄，不用包装函数了
</script>

## 函数防抖

算法需求: 频繁触发,仅执行最后一次出现的事件函数
算法实现: 清除上次延迟执行的记录,没有触发事件之后(空闲了),执行定时器内代码

实例: el.onscroll = function(){
    clearTimeout(timer);              //清除上次执行栈保存延迟执行的记录,并非本次timer!!!
    timer = setTimeout(function(){
        console.log('Hei,marry!');
    },3000);
};

